{"version":3,"sources":["components/Snowflakes.js","components/Ripples.js","components/Button.js","components/Row.js","components/Input.js","components/Loading.js","components/Col.js","components/Center.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Snowflakes","children","props","rippleAnimation","keyframes","RippleItem","x","y","size","count","Ripples","onMouseDown","type","className","useState","ripples","setRipples","wrapper","useRef","Wrapper","ref","e","current","getBoundingClientRect","width","height","left","top","Math","max","clientX","clientY","id","map","r","key","onAnimationEnd","filter","Button","attrs","Row","BaseInput","input","Input","right","autoComplete","animationDelays","Loading","Array","from","length","_","i","Ring","delay","rotate","sqrt","Col","Center","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TodoList","title","setTitle","todos","setTodos","useFetch","data","get","post","response","loading","error","loadInitialTodos","useCallback","a","initailTodos","ok","useEffect","addNewTodo","body","newTodo","style","marginBottom","margin","textDecoration","color","fontWeight","target","href","placeholder","value","onChange","onClick","todo","App","url","options","cachePolicy","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8c6db1b.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport styled, {keyframes} from \"styled-components\"; \n \n// 스타일\nconst Container = styled.div`\n   color:white;\n   overflow:hidden;\n   background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);\n   min-height: 100vh;\n   width: 100vw;\n \n//    overflow-x:hidden;\n\n`;\n \nexport const Snowflakes = ({ children, ...props }) => {\n   return (\n       <Container {...props}>\n           {children}\n       </Container>\n   )\n}\n ","import React, { useState, useRef } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst rippleAnimation = keyframes`\n  100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n`;\n\nconst RippleItem = styled.div`\n  position: absolute;\n  left: ${(props) => `${props.x}px`};\n  top: ${(props) => `${props.y}px`};\n  width: ${(props) => `${props.size}px`};\n  height: ${(props) => `${props.size}px`};\n  border-radius: 50%;\n  user-select: none;\n  pointer-events: none;\n  transform: scale(0);\n  opacity: 0.7;\n  animation: ${rippleAnimation} 0.5s linear;\n`;\n\n\n\nlet count = 0;\nconst RipplesBase = ({ children, onMouseDown, type, className, ...props }) => {\n  const [ripples, setRipples] = useState([]);\n  const wrapper = useRef();\n\n   const createRipple = (e) => {\n       const {\n           width,\n           height,\n           left,\n           top\n       } = wrapper.current.getBoundingClientRect();\n       const size = Math.max(width, height);\n       const x = e.clientX - left - size / 2;\n       const y = e.clientY - top - size / 2;\n       setRipples([...ripples, { size, x, y, id: count++ }]);\n       onMouseDown && onMouseDown(e);\n   };\n\n   const Wrapper = type || \"div\";\n\n\nreturn (\n     <Wrapper\n       {...props}\n       className={`ripples ${className}`}\n       ref={wrapper}\n       onMouseDown={createRipple}\n       >\n           {children}\n           {ripples.map((r) => (\n               <RippleItem\n                 {...r}\n                 key={r.id}\n                 className=\"ripple\"\n                 onAnimationEnd={() => \n                    setRipples(ripples.filter((x) => x.id !== r.id))\n                }\n                />\n           ))}\n       </Wrapper>\n   );\n}\n\nexport const Ripples = styled(RipplesBase)`\n   display:flex;\n   flex-direction: row;\n   background-color: #2a2734;\n   color: #fff;\n   box-shadow: none;\n   border-radius: 8px;\n   position: relative;\n   overflow:hidden;\n   user-select: none;\n   \n`;","// import React from 'react'\nimport styled from 'styled-components'\nimport { Ripples } from \"./Ripples\";\n\nexport const Button = styled(Ripples).attrs({ type: 'button'})`\n   &:focus {\n       outline: 0;\n   }\n\n   width: 170px;\n   height: 48px;\n   margin-left: 16px;\n   display:block;\n   background-color: #2a2734;\n   color: white;\n   box-shadow: none;\n   border: none;\n   border-radius: 8px;\n   position: relative;\n   overflow:hidden;\n   user-select: none;\n   cursor: pointer;\n   .ripple {\n       background-color: rgb(78,86,105);\n   }\n\n`;\n \n","import styled from \"styled-components\";\n\nexport const Row = styled.div``;","import React, { useRef, useState } from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst rippleAnimation = keyframes`\n  100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n`;\n\n\nconst RippleItem = styled.div`\n  position: absolute;\n  left: ${props => `${props.x}px`};\n  top: ${props => `${props.y}px`};\n  width: ${props => `${props.size}px`};\n  height: ${props => `${props.size}px`};\n  border-radius: 50%;\n  user-select: none;\n  pointer-events: none;\n  transform: scale(0);\n  opacity: .7;\n  animation: ${rippleAnimation} .5s linear;\n`\n\nlet count = 0\nconst RipplesBase = ({ children, onMouseDown, type, className, ...props }) => {\nconst [ripples, setRipples] = useState([])\nconst wrapper = useRef()\n\nconst createRipple = e => {\n  const { width, height, left, top } = wrapper.current.getBoundingClientRect();\n  const size = Math.max(width, height)\n  const x = e.clientX - left - (size / 2)\n  const y = e.clientY - top - (size / 2)\n  setRipples([...ripples, { size, x, y, id: count++ }])\n  onMouseDown && onMouseDown(e)\n};\n\nconst Wrapper = type || 'div'\n\n\nreturn (\n    <Wrapper\n      {...props}\n      className={`ripples ${className}`}\n      ref={wrapper}\n      onMouseDown={createRipple}\n    >\n      {children}\n      {ripples.map(r => (\n        <RippleItem\n          {...r}\n          key={r.id}\n          className='ripple'\n          onAnimationEnd={() => setRipples(ripples.filter(x => x.id !== r.id))}\n        />\n      ))}\n    </Wrapper>\n  )\n  }\n  \n\n\n  const Ripples = styled(RipplesBase)`\n  display: flex;\n  flex-direction: row;\n  background-color: #2a2734;\n  color: white;\n  box-shadow: none;\n  border-radius: 8px;\n  position: relative;\n  overflow: hidden;\n  user-select: none;\n  `\n\n  const BaseInput = styled.input`\n  border: none;\n  transition: translate .2s;\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n  color: white;\n  }\n`;\n\n \nconst RippleInputBase = ({ className, left,right, ...props}) => (\n    <Ripples className={className}>\n        {left && left}\n        <BaseInput\n        className={`input ${className}`}\n        autoComplete=\"off\"\n        {...props}\n        />\n      {right && right}\n    </Ripples>   \n)\n\n \n \n\nexport const Input = styled(RippleInputBase)`\n   &:focus-within {\n       background-color: rgb(78,86,105);\n   }\n   height: 48px;\n   width: 170px;\n   display:flex;\n   align-items: center;\n   background-color: #343F57;\n   color: white;\n   box-shadow: none;\n   border-radius: 8px;\n   position: relative;\n   overflow: hidden;\n   box-sizing: border-box;\n   padding: 10px;\n   width: -webkit-fill-available;\n   user-select- none;\n   .ripple {\n       background:#6d7fac;\n   }\n`; ","import React from 'react';\nimport styled, {keyframes} from \"styled-components\";\n\n// 로딩 애니메이션 딜레이\nconst animationDelays = [\n    -0.45,\n    -0.3,\n    -0.15\n]\n\nexport const Loading = props => {\n    return (\n        <Container {...props}>\n            {Array.from({ length: 3 }).map((_, i) => (\n                <Ring className=\"ring\" key={i} delay={animationDelays[i]} />\n            ))}\n        </Container>\n    )\n}\n\nconst rotate = keyframes`\n    0% { transform: rotate(0deg);}\n    100% { transform: rotate(360deg);}\n`;\n \n\nconst size = 20\nconst Ring = styled.div`\n   box-sizing:border-box;\n   display: block;\n   position: absolute;\n   width: ${size}px;\n   height: ${size}px;\n   margin: 8px;\n   border: ${Math.sqrt(size) - 1}px solid #fff;\n   border-radius: 50%;\n   animation: ${rotate} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n   border-color: white transparent transparent transparent;\n   animation-delay: ${props => props.delay}s;\n`;\n\nconst Container = styled.div`\n     display: inline-block;\n     position: relative;\n     width: 32px;\n     height: 32px;\n`;","import styled from \"styled-components\";\n\n\nexport const Col = styled.div`\n    display:flex;\n    flex-direction: column;\n    text-align:left;\n    height: 500px;\n    overflow:scroll;\n    width: 480px;\n`;","import styled from \"styled-components\";\n\n\nexport const Center = styled.div`\n   display:flex;\n   height: 100vh;\n   flex-direction: column;\n   jstify-content: center;\n   align-items:center;\n   color:white;\n`;","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n    }\n  };\n  \n  export default reportWebVitals;","/* eslint-disable no-unused-vars */\nimport \"./style.css\";\nimport React, {useState,useEffect,useCallback} from 'react'\nimport {render} from \"react-dom\";\nimport useFetch, { Provider } from \"use-http\";\nimport {\n  Button,\n  Row,\n  Snowflakes,\n  Input,\n  Loading,\n  Col,\n  Center\n\n} from \"./components\";\n \nimport reportWebVitals from './reportWebVitals';\n \n \n// TodoList 설정 \nconst TodoList = () => {\n  const [title, setTitle] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n \n  // get post 방식 API 처럼 const\n  const { get,post,response, loading, error } = useFetch({data: []});\n  \n   // todos 생성자 만들기\n  const loadInitialTodos = useCallback(async () => {\n    // const { ok } = response // 좋지 않는 방법\n    // /todos 파일에 접근해서 get방식으로 가져옴\n    const initailTodos = await get(\"/todos\");\n    if(response.ok) setTodos(initailTodos);\n\n  }, [get,response]); // 배열 받아옴\n \n  useEffect(() => {\n    loadInitialTodos();\n  }, [loadInitialTodos]); // componentDiMount \n\n \n  // 새로운 Todo 리스트 만들기\n  const addNewTodo = useCallback(async () => {\n    if (!title) return; // 만약 타이틀이없다면 항목을 추가하지않음\n    // const { ok } = response // 좋지않는 방법\n    // 새로운 todo == 제목과 body에 있는 제목들 받아옴\n    const newTodo = await post(\"/todos\", { title, body: title });\n\n    if(response.ok) {\n      setTitle(\"\");\n\n      // 목록 맨앞에 추가 \n      setTodos((todos) => [newTodo, ...todos]);\n    }\n  }, [post,response,title]); // 배열로 받아오기\n\n\n\n  return (\n    <Snowflakes>\n        <Center>\n            <h1 style={{ marginBottom: 0}}>TodoList만들기</h1>\n            <h3 style={{ margin: 0 }}>use-http</h3>\n            <a \n              style={{margin: \"4px 0 12px 0\", \n              textDecoration: \"none\", color:\"white\", \n              fontWeight: \"bold\"}}\n              target=\"_link\"\n              href=\"https://www.youtube.com/watch?v=_-GujYZFCKI&list=PLZIwrWkE9rCdUybd8t3tY-mUMvXkCdenW&index=6\"\n           >\n             유튜브 링크\n            </a>\n            \n            <Row>\n              <Input \n                 placeholder=\"Add todo title🔥\"\n                 value={title}\n                 onChange={(e) => setTitle(e.target.value)}\n                 right={loading && <Loading/>}\n                 />\n                <Button onClick={addNewTodo}>\n                  {loading ? \"추가할 리스트를 입력해주세요...\" : \"리스트 추가\"}\n                </Button>\n            </Row>\n            <Col>\n              {error && \"Error!\"}\n              {todos.map((todo, i) => (\n                <div key={i}>\n                  {i + 1}. {todo.title}\n                </div>\n              ))}\n        </Col>\n        </Center>\n    </Snowflakes>\n  )\n} \n\n\nconst App = () => {\n  return (\n      <Provider\n         url=\"https://jsonplaceholder.typicode.com\"\n        options={{ cachePolicy: \"no-cache\" }}\n      >\n          <TodoList /> \n      </Provider>\n  );\n}\n\n\nrender(<App/>, document.getElementById(\"root\"));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}